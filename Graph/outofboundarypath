class Solution {
public:
    map<vector<int>,int> m1;
    int dp[51][51][51];
    int solve(int& m, int& n, int t, int x, int y) {
        if(x>=m || x<0 || y<0 || y>=n)return 1;
        
        if(t<1)return 0;
        
        
        
        if(dp[t][x][y]!=-1){
            return dp[t][x][y]%1000000007;            
        }
        
        
        long long temp=0;
        temp+=solve(m,n,t-1,x+1,y);
        
        temp+=solve(m,n,t-1,x-1,y);
        
        temp+=solve(m,n,t-1,x,y-1);
        
        temp+=solve(m,n,t-1,x,y+1);
        
        dp[t][x][y]=temp%1000000007;
        
        return dp[t][x][y];
        
    }
    
    int findPaths(int m, int n, int N, int i, int j) {
        
        ios::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
        
        int ans=0;
        memset(dp,-1,sizeof(dp));
        ans = solve(m, n, N, i, j);
        ans=ans%1000000007;
        return (int)ans;
    }
};
